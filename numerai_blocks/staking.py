# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/10_staker.ipynb (unless otherwise specified).

__all__ = ['BaseStaker']

# Cell
import numpy as np
from typing import Union
from tqdm.auto import tqdm
from numerapi import NumerAPI
from typeguard import typechecked
from rich import print as rich_print

from .key import Key, load_key_from_json

# Cell
@typechecked
class BaseStaker:
    """
    Base class for staking functionality which holds for both Numerai Classic and Signals.
    :param key: a numerai-blocks Key object
    :param tournament_number: ID of the tournament (8 for Numerai Classic and 11 for Numerai Signals).
    """
    def __init__(self, key: Key, tournament_number: int, *args, **kwargs):
        self.tournament_number = tournament_number
        self.api = NumerAPI(public_id=key.pub_id, secret_key=key.secret_key, *args, **kwargs)

    def stake_change(self, model_name: str, amount: Union[float, str]):
        """
        Change arbitrary stake amount.
        :param model_name: Lowercase raw model name (For example, 'integration_test').
        :param amount: NMR amount to increase or decrease.
        negative number = Stake decrease.
        positive number = Stake increase.
        """
        action = 'decrease' if amount < 0 else 'increase'
        color = 'red' if amount < 0 else 'green'
        model_id = self._get_model_id(model_name=model_name)
        rich_print(f"[bold {color}]{action[:-1]}ing[/bold {color}] stake by amount '[bold {color}]{amount}[/bold {color}]' for model: [bold blue]'{model_name}'[/bold blue] (id='{model_id}')!")
        self.api.stake_change(nmr=amount, action=action,
                              model_id=model_id, tournament=self.tournament_number)

    def stake_drain_all(self):
        """ WARNING!!! This function will remove all stakes for all models in your account!!! """
        prompt = input(f"WARNING: You are about to remove all stakes for all your models! Are you sure? [Y/n]")
        if prompt == "Y":
            model_names = list(self.get_model_mapping.keys())
            for name in tqdm(model_names, desc="Full stake drain!"):
                self.stake_drain_single(model_name=name)
        else:
            rich_print("Aborting full stake draining.")

    def stake_drain_single(self, model_name: str):
        """
        WARNING!!! This function removes your full stake for a given model name!!!
        :param model_name: Lowercase raw model name (For example, 'integration_test').
        """
        model_id = self._get_model_id(model_name=model_name)
        rich_print(f":warning: Draining stake for model: '{model_name}' (id: '{model_id}' :warning:")
        self.api.stake_drain(model_id=model_id, tournament=self.tournament_number)

    def _get_model_id(self, model_name: str) -> str:
        """Get ID needed for staking."""
        return self.get_model_mapping[model_name]

    @property
    def get_model_mapping(self) -> dict:
        """Mapping between raw model names and model IDs."""
        return self.api.get_models()

    @property
    def available_nmr(self):
        """ Check how much NMR is available in your wallet. """
        return np.float64(self.api.get_account()['availableNmr'])