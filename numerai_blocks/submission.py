# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/09_submission.ipynb (unless otherwise specified).

__all__ = ['BaseSubmittor', 'NumeraiClassicSubmittor']

# Cell
import uuid
import numpy as np
import pandas as pd
from pathlib import Path
from typeguard import typechecked
from abc import abstractmethod
from rich import print as rich_print
from numerapi import NumerAPI, SignalsAPI

from .download import BaseIO
from .key import Key

# Cell
@typechecked
class BaseSubmittor(BaseIO):
    def __init__(self, directory_path: str, key: Key):
        super(BaseSubmittor, self).__init__(directory_path)
        self.dir = Path(directory_path)
        self._create_directory()
        self.key = key

    @abstractmethod
    def save_csv(self, dataf: pd.DataFrame, file_name: str, target_columns: list, *args, **kwargs):
        """ Save DataFrame with 'id' + 'target_columns'. """
        ...

    @abstractmethod
    def upload_predictions(self, file_name: str, model_name: str, *args, **kwargs):
        """ Upload file for given model name through API. """
        ...

    def full_submission(self, dataf: pd.DataFrame, file_name: str, model_name: str, target_columns: list, *args, **kwargs):
        """ Save DataFrame and upload predictions through API. """
        self.save_csv(dataf=dataf, file_name=file_name, target_columns=target_columns, *args, **kwargs)
        self.upload_predictions(file_name=file_name, model_name=model_name, *args, **kwargs)

    def __call__(self, dataf: pd.DataFrame, file_name: str, model_name: str, target_columns: list, *args, **kwargs):
        """
        The most common use case will be to create a CSV and submit it immediately after that.
        full_submission handles this.
        """
        self.full_submission(dataf=dataf,
                             file_name=file_name,
                             model_name=model_name,
                             target_columns=target_columns,
                             *args, **kwargs)

# Cell
class NumeraiClassicSubmittor(BaseSubmittor):
    """
    Submit for Numerai Classic through NumerAPI
    :param directory_path: Base directory to save and read prediction files from.
    :param key: Key object (numerai-blocks.key.Key) containing valid credentials for Numerai Classic.
    *args, **kwargs will be passed to NumerAPI initialization.
    """
    def __init__(self, directory_path: str, key: Key, *args, **kwargs):
        super(NumeraiClassicSubmittor, self).__init__(directory_path=directory_path, key=key)
        self.napi = NumerAPI(public_id=self.key.pub_id, secret_key=self.key.secret_key, *args, **kwargs)

    def save_csv(self, dataf: pd.DataFrame, file_name: str, target_columns: list, *args, **kwargs):
        full_path = str(self.dir / file_name)
        rich_print(f":page_facing_up: Saving predictions CSV to '{full_path}'. :page_facing_up:")
        dataf[target_columns].to_csv(full_path, *args, **kwargs)

    def upload_predictions(self, file_name: str, model_name: str, *args, **kwargs):
        full_path = str(self.dir / file_name)
        model_id = self._get_model_id(model_name=model_name)
        rich_print(f":airplane: Uploading predictions from '{full_path}' for model [bold blue]'{model_name}'[/bold blue] (model_id='{model_id}') :airplane:")
        self.napi.upload_predictions(file_path=full_path,
                                     model_id=model_id,
                                     *args, **kwargs)
        rich_print(f":thumbs_up: Submission of '{full_path}' for [bold blue]{model_name}[/bold blue] is successful! :thumbs_up:")

    def _get_model_id(self, model_name: str) -> str:
        """ Get ID needed for prediction uploading. """
        return self.get_model_mapping()[model_name]

    @property
    def get_model_mapping(self) -> dict:
        """ Mapping between raw model names and model IDs. """
        return self.napi.get_models()