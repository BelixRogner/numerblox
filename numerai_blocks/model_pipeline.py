# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/06_modelpipeline.ipynb (unless otherwise specified).

__all__ = ['ModelPipeline', 'ModelPipelineCollection']

# Cell
from typing import List
from tqdm.auto import tqdm
from typeguard import typechecked
from rich import print as rich_print

from .dataset import Dataset
from .preprocessing import BaseProcessor, CopyPreProcessor, display_processor_info
from .model import BaseModel

# Cell
@typechecked
class ModelPipeline:
    def __init__(self,
                 pipeline_name: str,
                 model: BaseModel,
                 preprocessors: List[BaseProcessor] = None,
                 postprocessors: List[BaseProcessor] = None,
                 copy_first = True):
        self.pipeline_name = pipeline_name
        self.model = model
        self.preprocessors = preprocessors
        if copy_first:
            self.preprocessors.insert(0, CopyPreProcessor())
        self.postprocessors = postprocessors

    def preprocess(self, dataset: Dataset) -> Dataset:
        for preprocessor in tqdm(self.preprocessors,
                                 desc=f"{self.pipeline_name} Preprocessing:",
                                 position=0):
            rich_print(f":car: Applying preprocessing {preprocessor.__class__.__name__} :car:")
            dataset = preprocessor(dataset)
        return dataset

    def postprocess(self, dataset: Dataset) -> Dataset:
        for postprocessor in tqdm(self.postprocessors,
                                  desc=f"{self.pipeline_name} Postprocessing: ",
                                  position=0):
            rich_print(f":car: Applying postprocessing {postprocessor.__class__.__name} :car:")
            dataset = postprocessor(dataset)
        return dataset

    @display_processor_info
    def pipeline(self, dataset: Dataset):
        preprocessed_dataset = self.preprocess(dataset)
        prediction_dataset = self.model(preprocessed_dataset)
        processed_prediction_dataset = self.postprocess(prediction_dataset)
        return processed_prediction_dataset

    def __call__(self, dataset: Dataset):
        return self.pipeline(dataset)

# Cell
@typechecked
class ModelPipelineCollection:
    def __init__(self, pipelines: List[ModelPipeline]):
        self.pipelines = {pipe.pipeline_name: pipe for pipe in pipelines}
        self.pipeline_names = list(self.pipelines.keys())

    def process_all_pipelines(self, dataset: Dataset):
        for name, pipeline in tqdm(self.pipelines.items(),
                                   desc="Processing Pipeline Collection"):
            self.process_single_pipeline(dataset, name)

    def process_single_pipeline(self, dataset: Dataset, pipeline_name: str):
        rich_print(f":construction_worker: [bold green]Processing model pipeline:[/bold green] '{pipeline_name}' :construction_worker:")
        pipeline = self.get_pipeline(pipeline_name)
        pipeline(dataset)

    def get_pipeline(self, pipeline_name: str) -> ModelPipeline:
        available_pipelines = self.pipeline_names
        assert pipeline_name in available_pipelines, f"Requested pipeline '{pipeline_name}', but only the following models are in the collection: '{available_pipelines}'."
        return self.pipelines[pipeline_name]

    def __call__(self, dataset: Dataset):
        self.process_all_pipelines(dataset=dataset)