{"title":"NumerBlox","markdown":{"yaml":{"description":"Solid Numerai pipelines","output-file":"index.html","title":"NumerBlox"},"headingText":"1. Install","containsRefs":false,"markdown":"\n\n\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\n`numerblox` offers Numerai specific functionality, so you can worry less about software/data engineering and focus more on building great Numerai models!\n\nMost of the components in this library are designed for solid weekly inference pipelines, but tools like [`NumerFrame`](https://crowdcent.github.io/numerblox/numerframe.html#numerframe), preprocessors and evaluators also greatly simplify the training process.\n\n**Documentation:** [crowdcent.github.io/numerblox](https://crowdcent.github.io/numerblox/)\n\n![](https://img.shields.io/pypi/v/numerblox) ![](https://img.shields.io/pypi/pyversions/numerblox) ![](https://img.shields.io/github/contributors/crowdcent/numerblox) ![](https://img.shields.io/github/issues-raw/crowdcent/numerblox) ![](https://img.shields.io/github/repo-size/crowdcent/numerblox) ![](https://img.shields.io/github/workflow/status/crowdcent/numerblox/CI)\n\n\n## 1. Getting Started\n\n**This document has been generated by [NBDev](https://github.com/fastai/nbdev).** Please edit `nbs/index.ipynb` instead of this `README.md`. Read `CONTRIBUTING.MD` for more information on the contribution process and how to change files. Thank you!\n\n### 1.1 Installation\n\nInstall numerblox from PyPi by running:\n\n`pip install numerblox`\n\nAlternatively you can clone this repository and install it in development mode\nrunning the following from the root of the repository:\n\n`pip install -e .`\n\n### 1.2 Running Notebooks\n\nStart by spinning up your favorite Jupyter Notebook environment. Here we'll use:\n\n`jupyter notebook`\n\nTest your installation using one of the education notebooks in `nbs/edu_nbs`.\nA good example is `numerframe_tutorial`. Run it in your Notebook environment to\nquickly test if your installation has succeeded\n\n### 2.1. Contents\n\n#### 2.1.1. Core functionality\n\n`numerblox` features the following functionality:\n\n1. Downloading data\n2. A custom data structure extending Pandas DataFrame ([`NumerFrame`](https://crowdcent.github.io/numerblox/numerframe.html#numerframe))\n3. A suite of preprocessors for Numerai Classic and Signals (feature selection, engineering and manipulation)\n4. Model objects for easy inference.\n5. A suite of postprocessors for Numerai Classic and Signals (standardization, ensembling, neutralization and penalization)\n6. Pipelines handling processing and prediction ([`ModelPipeline`](https://crowdcent.github.io/numerblox/modelpipeline.html#modelpipeline) and [`ModelPipelineCollection`](https://crowdcent.github.io/numerblox/modelpipeline.html#modelpipelinecollection))\n7. Evaluation ([`NumeraiClassicEvaluator`](https://crowdcent.github.io/numerblox/evaluation.html#numeraiclassicevaluator) and [`NumeraiSignalsEvaluator`](https://crowdcent.github.io/numerblox/evaluation.html#numeraisignalsevaluator))\n8. Authentication ([`Key`](https://crowdcent.github.io/numerblox/key.html#key) and [`load_key_from_json`](https://crowdcent.github.io/numerblox/key.html#load_key_from_json))\n9. Submitting ([`NumeraiClassicSubmitter`](https://crowdcent.github.io/numerblox/submission.html#numeraiclassicsubmitter), [`NumeraiSignalsSubmitter`](https://crowdcent.github.io/numerblox/submission.html#numeraisignalssubmitter) and [`NumerBaySubmitter`](https://crowdcent.github.io/numerblox/submission.html#numerbaysubmitter))\n10. Automated staking ([`NumeraiClassicStaker`](https://crowdcent.github.io/numerblox/staking.html#numeraiclassicstaker) and [`NumeraiSignalsStaker`](https://crowdcent.github.io/numerblox/staking.html#numeraisignalsstaker))\n\n#### 2.1.2. Educational notebooks\n\nExample notebooks can be found in the `nbs/edu_nbs` directory.\n\n`nbs/edu_nbs` currently contains the following examples:\n- `numerframe_tutorial.ipynb`: A deep dive into what [`NumerFrame`](https://crowdcent.github.io/numerblox/numerframe.html#numerframe) has to offer.\n- `submitting.ipynb`: How to use Submitters for safe and easy Numerai submissions.\n- `google_cloud_storage.ipynb`: How to use Downloaders and Submitters to interact with Google Cloud Storage (GCS).\n- `load_model_from_wandb.ipynb`: For [Weights & Biases](https://wandb.ai/) users. Easily pull a model from W&B for inference.\n- `numerbay_integration.ipynb`: How to use `NumerBlox` to download and upload predictions listed on [NumerBay](https://numerbay.ai).\n- `synthetic_data_generation.ipynb`: Tutorial for generating synthetic data for training Numerai models.\n\nDevelopment notebooks are also in the `nbs` directory. These notebooks are also used to generate the documentation.\n\n**Full documentation:** [crowdcent.github.io/numerblox](https://crowdcent.github.io/numerblox/)\n\n### 2.2. Examples\n\nBelow we will illustrate a common use case for inference pipelines. To learn more in-depth about the features of this library, check out notebooks in `nbs/edu_nbs`.\n\n#### 2.2.1. Numerai Classic\n\n```python\n# --- 0. Numerblox dependencies ---\nfrom numerblox.download import NumeraiClassicDownloader\nfrom numerblox.numerframe import create_numerframe\nfrom numerblox.postprocessing import FeatureNeutralizer\nfrom numerblox.model import SingleModel\nfrom numerblox.model_pipeline import ModelPipeline\nfrom numerblox.key import load_key_from_json\nfrom numerblox.submission import NumeraiClassicSubmitter\n\n# --- 1. Download version 4 data ---\ndownloader = NumeraiClassicDownloader(\"data\")\ndownloader.download_inference_data(\"current_round\")\n\n# --- 2. Initialize NumerFrame ---\ndataf = create_numerframe(file_path=\"data/current_round/live.parquet\")\n\n# --- 3. Define and run pipeline ---\nmodels = [SingleModel(\"test_assets/joblib_v2_example_model.joblib\",\n                      model_name=\"test\")]\n# No preprocessing and 0.5 feature neutralization\npostprocessors = [FeatureNeutralizer(pred_name=f\"prediction_test\",\n                                     proportion=0.5)]\npipeline = ModelPipeline(preprocessors=[],\n                         models=models,\n                         postprocessors=postprocessors)\ndataf = pipeline(dataf)\n\n# --- 4. Submit ---\n# Load credentials from .json (random credentials in this example)\nkey = load_key_from_json(\"test_assets/test_credentials.json\")\nsubmitter = NumeraiClassicSubmitter(directory_path=\"sub_current_round\", key=key)\n# full_submission checks contents, saves as csv and submits.\nsubmitter.full_submission(dataf=dataf,\n                          cols=f\"prediction_test_neutralized_0.5\",\n                          model_name=\"test\")\n\n# --- 5. Clean up environment (optional) ---\ndownloader.remove_base_directory()\nsubmitter.remove_base_directory()\n```\n\n#### 2.2.2. Numerai Signals\n\n```python\n# --- 0. Numerblox dependencies ---\nfrom numerblox.download import KaggleDownloader\nfrom numerblox.numerframe import create_numerframe\nfrom numerblox.preprocessing import KatsuFeatureGenerator\nfrom numerblox.model import SingleModel\nfrom numerblox.model_pipeline import ModelPipeline\nfrom numerblox.key import load_key_from_json\nfrom numerblox.submission import NumeraiSignalsSubmitter\n\n# --- 1. Download Katsu1110 yfinance dataset from Kaggle ---\nkd = KaggleDownloader(\"data\")\nkd.download_inference_data(\"code1110/yfinance-stock-price-data-for-numerai-signals\")\n\n# --- 2. Initialize NumerFrame ---\ndataf = create_numerframe(\"data/full_data.parquet\")\n\n# --- 3. Define and run pipeline ---\nmodels = [SingleModel(\"models/signals_model.cbm\", model_name=\"cb\")]\n# Simple and fast feature generator based on Katsu Signals starter notebook\n# https://www.kaggle.com/code1110/numeraisignals-starter-for-beginners\npipeline = ModelPipeline(preprocessors=[KatsuFeatureGenerator(windows=[20, 40, 60])],\n                         models=models,\n                         postprocessors=[])\ndataf = pipeline(dataf)\n\n# --- 4. Submit ---\n# Load credentials from .json (random credentials in this example)\nkey = load_key_from_json(\"test_assets/test_credentials.json\")\nsubmitter = NumeraiSignalsSubmitter(directory_path=\"sub_current_round\", key=key)\n# full_submission checks contents, saves as csv and submits.\n# cols selection must at least contain 1 ticker column and a signal column.\ndataf['signal'] = dataf['prediction_cb']\nsubmitter.full_submission(dataf=dataf,\n                          cols=['bloomberg_ticker', 'signal'],\n                          model_name=\"test_model1\")\n\n# --- 5. Clean up environment (optional) ---\nkd.remove_base_directory()\nsubmitter.remove_base_directory()\n```\n\n## 3. Contributing\n\nBe sure to read `CONTRIBUTING.md` for detailed instructions on contributing.\n\nIf you have questions or want to discuss new ideas for `numerblox`, check out [rocketchat.numer.ai/channel/numerblox](https://rocketchat.numer.ai/channel/numerblox).\n\n\n## 4. Branch structure\n\nEvery new feature should be implemented in a branch that branches from `dev` and has the naming convention `feature/{FEATURE_DESCRIPTION}`. Explicit bugfixes should be named `bugfix/{FIX_DESCRIPTION}`. An example structure is given below.\n\n## 5. Crediting sources\n\nSome of the components in this library may be based on forum posts, notebooks or ideas made public by the Numerai community. We have done our best to ask all parties who posted a specific piece of code for their permission and credit their work in the documentation. If your code is used in this library without credits, please let us know, so we can add a link to your article/code.\n\nIf you are contributing to `numerblox` and are using ideas posted earlier by someone else, make sure to credit them by posting a link to their article/code in documentation.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.280","theme":"cosmo","description":"Solid Numerai pipelines","title":"NumerBlox"},"extensions":{"book":{"multiFile":true}}},"gfm":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":false,"output-ext":"md","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"variant":"+autolink_bare_uris+emoji+footnotes+gfm_auto_identifiers+pipe_tables+strikeout+task_lists+tex_math_dollars"},"pandoc":{"standalone":true,"default-image-extension":"png","to":"commonmark","output-file":"index.html"},"language":{},"metadata":{"description":"Solid Numerai pipelines","title":"NumerBlox"}}}}